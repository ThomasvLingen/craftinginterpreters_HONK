var start_timestamp = honk_get_time_ms(); // This is used for timing the test script
var end_timestamp;

{ // Printing variables
    var example_var_str = "Hello HONK!";
    var example_var_int = 12345;
    var example_var_bool = true;
    var example_var_null = null;
    var example_var_nativefn = print;

    print("String var: ");
    println(example_var_str);

    print("Int var: ");
    println(example_var_int);

    print("Bool var: ");
    println(example_var_bool);

    print("Null var: ");
    println(example_var_null);

    print("Native function var: ");
    println(example_var_nativefn);
}

{ // Print statements with expressions
    print("Expect 6: ");
    println(1 + 2 + 3);
}

{ // Expression statements
    3 * 4;
    3 > 2;
    3 != 1;
}

{ // Variables + expressions
    var three = 3;
    var five = 5;
    println("Expect true for the following:");
    println(three + five == 8);
    println(three < five);
    println(!(three > five));
}

{ // Scopes + shadowing
    var global_a = 10;
    {
        var local_b = 5;
        println(global_a + local_b == 15);
    }
    {
        var local_b = 10;
        println(global_a + local_b == 20);

        {
            // This should shadow the top declaration
            var global_a = 1;
            println(global_a + local_b == 11);
        }
    }
}

{ // If statements
    println("Expect 3 trues:");
    if (true) {
        println(true);
    }

    if (false) {
        println(false);
    }

    var if_test_assign = 0;
    if (if_test_assign = if_test_assign + 1) {
        println(true);
    }

    if (true == false) {
        println(false);
    } else {
        println(true);
    }
}

{ // While statements
    print("Expect a count from 1 to 9: ");
    var a = 0;
    while ((a = a + 1) < 4) {
        print(a);
        print(" ");
    }
}

{ // For statements
  for (var i = 4; i < 8; i = i + 1) {
      print(i);
      print(" ");
  }

  var i = 7; // Note, this declaration doesn't clash with the one above
  for (;(i = i + 1) < 10;) {
      print(i);
      print(" ");
  }
  println("");
}

{ // Native Function calls
    print("scope depth (expect 2): ");
    println(honk_get_scope_depth());
    {
        print("scope depth (expect 3): ");
        println(honk_get_scope_depth());

        {
            print("scope depth (expect 4): ");
            println(honk_get_scope_depth());
        }
    }
}

// Function declarations
fun honk()
{
    println("HONK!");
}

fun honk_x_times(times_to_honk)
{
    for (;times_to_honk > 0; times_to_honk = times_to_honk - 1) {
        honk();
    }
}

fun count(end)
{
    for (var i = 1; i <= end; i = i + 1) {
        print("Count - ");
        println(i);
    }
}

println("Expect 3 honks");
honk_x_times(3);

println("Expect a count from 1 to 3");
count(3);

// Return statements
fun fibonacci(n)
{
    if (n <= 1) {
         return n;
    }

    return fibonacci(n - 2) + fibonacci(n - 1);
}

for (var i = 1; i < 11; i = i + 1) {
    print("fibb(");
    print(i);
    print(") = ");

    println(fibonacci(i));
}

fun empty_return_example(num)
{
    if (num <= 0) {
        return;
    }

    print("This is higher than 0 --> ");
    println(num);
}

// Closures
fun make_counter()
{
    var counter = 0;

    fun count()
    {
        return counter = counter + 1;
    }

    return count;
}

print("Expect count from 1 to 3: ");
var some_counter = make_counter();
print(some_counter());
print(some_counter());
print(some_counter());
println("");

// Anonymous functions
fun countdown(from, fn)
{
    for (; from >= 0; from = from - 1) {
        fn(from);
    }
}

countdown(3, fun(x) {
    if (x > 0) {
        print(x);
        println(" bottles on the wall");
    } else {
        println("No bottles left on the wall :(");
    }
});

// Classes!
class Honker
{
    honk()
    {
        println("Honk!");
    }
}

print("Class in string form: ");
println(Honker);

// Grammar edge-case. fun expr where a statement _could_ be
fun () { return "do not crash please"; };

end_timestamp = honk_get_time_ms(); // End timestamp
print("Time taken in ms: ");
println(end_timestamp - start_timestamp);
